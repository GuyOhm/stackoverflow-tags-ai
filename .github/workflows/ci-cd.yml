name: CI/CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies for tests
        run: |
          pip install -e .[tests] pytest

      - name: Download NLTK data
        run: python -m nltk.downloader punkt punkt_tab stopwords wordnet averaged_perceptron_tagger

      - name: Run tests
        run: |
          python -m pytest

  build-and-push:
    name: Build, download models, and push images
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: env-prod
    env:
      ACR_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      ACR_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      AZURE_STORAGE_SHARE: ${{ secrets.AZURE_STORAGE_SHARE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download models from Azure Blob Storage
        run: |
          az storage blob download-batch \
            --account-name "$AZURE_STORAGE_ACCOUNT" \
            --account-key "$AZURE_STORAGE_KEY" \
            --destination "./models" \
            --source "$AZURE_STORAGE_SHARE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: api
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/stackoverflow-api:${{ github.sha }}

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: streamlit
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/stackoverflow-ui:${{ github.sha }}

  deploy:
    name: Deploy to Azure Container Apps
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: env-prod
    env:
      ACR_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      RG: ${{ secrets.AZURE_RG }}
      ENV_CA: ${{ secrets.AZURE_CA_ENV }}
      API_APP_NAME: ${{ secrets.AZURE_API_APP }}
      UI_APP_NAME: ${{ secrets.AZURE_UI_APP }}
    steps:
      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set image tags
        id: vars
        run: |
          echo "API_IMAGE=${ACR_LOGIN_SERVER}/stackoverflow-api:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "UI_IMAGE=${ACR_LOGIN_SERVER}/stackoverflow-ui:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Update API container app
        run: |
          az containerapp update \
            -g $RG -n $API_APP_NAME \
            --image ${{ steps.vars.outputs.API_IMAGE }}

      - name: Update UI container app
        run: |
          az containerapp update \
            -g $RG -n $UI_APP_NAME \
            --image ${{ steps.vars.outputs.UI_IMAGE }} \
            --set-env-vars API_URL=http://${{ env.API_APP_NAME }}:8000/predict